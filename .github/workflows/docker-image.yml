name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Paso 1: Descargar el código fuente del repositorio
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    # Paso 2: Obtener la versión semántica basada en los mensajes de commit
    #- name: Git Semantic Version
      # uses: PaulHatch/semantic-version@v4.0.3
      # with:
         #major_pattern: "major:"
        # minor_pattern: "feat:"
        # format: "${major}.${minor}.${patch}${increment}"
      # id: version

    # Paso 3: Configurar Docker Buildx
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    # Paso 4: Configurar caché de Docker para acelerar la construcción
    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-docker-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-docker-

    # Paso 5: Iniciar sesión en Docker Hub
    - name: Docker Login
      env:
        DOCKER_USER: ${{ secrets.DOCKER_USER }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: |
        echo $DOCKER_PASSWORD | docker login -u $DOCKER_USER --password-stdin

    # Paso 6: Construir la imagen de Docker
    - name: Build Docker Image
      env:
        NEW_VERSION: ${{ steps.version.outputs.version }}
        JAR_FILE: "DeepDiveRecord-0.9.0.jar"  # Define el nombre del archivo JAR
      run: |
        docker buildx build \
          --cache-from type=local,src=/tmp/.buildx-cache \
          --cache-to type=local,dest=/tmp/.buildx-cache,mode=max \
          -t alorpes/deepdive-record-api:$NEW_VERSION \
          -t alorpes/deepdive-record-api:latest \
          --build-arg JAR_FILE=${JAR_FILE} \
          --push .
